// notes for self-use 12.06.21
**: Referring to Components
++: Referring to some key terms

/* 
  Lectures Covered:
  Storing User Data In Our App
  Sign Up Component
  Sign Up With Email and Password
  Sign In With Email and Password
*/

# Storing User Data In Our App

- user data was stored in out database, but now we have to
  store that data in the "state" of our app so we can use it in our app. 

Code #1
```
  componentDidMount() {
    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {
      // check if userAuth is null; when user is signed out, it is null; 
      if (userAuth) {
      }
    });
  }
```

- the documentSnapshot object allows us to check if a document exists
  at this query using the .exists property which returns a boolean. 

- we can also get the +actual properties+ on the object by calling the 
  .data() method, which returns us a JSON object of the document. 

Code #2: 
// we get the id from the snapShot, and the actual data from .data() method; 
// therefore, we set the currenUser's id to the id, and spread in the rest of the data; 
```
        const userRef = createUserProfileDocument(userAuth);
        userRef.onSnapshot(snapShot => {
          this.setState({currentUser: {
            id: snapShot.id,
            ...snapShot.data()
          }})
        })
```

Code #3: 
// we set the currentUser back to null if the user signs out, wrapped in the else block; 
```
  componentDidMount() {
    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {
      if (userAuth) {
        const userRef = createUserProfileDocument(userAuth);

        userRef.onSnapshot(snapShot => {
          this.setState({
            currentUser: {
              id: snapShot.id,
              ...snapShot.data()
            }
          })
        })
      } else {
        this.setState({ currentUser: this.unsubscribeFromAuth });
      }
    });
  }
```

# Sign Up Component

- the *SignUp* component will be a class component with state; 
  we will also import in +auth+ and +createUserProfileDocument+ from firebase.

- we will want to do what we did in App.js when we have Google authentication happening (similar). 

Code #1:
// we check if password and confirm password matches; if not, alert the user (this should be changed 
  to display message in alerting color later on)
```
  handleSubmit = async event => {
    event.preventDefault();

    const { displayName, email, password, confirmPassword } = this.state;

    if (password !== confirmPassword) {
      
    }

    this.setState({ email: '', password: '' });
  }
```

Code #2: 
// wrap everything in try catch block;
// after user is created, set everything back to blank; 
```
    try {
      const { user } = await auth.createUserWithEmailAndPassword(email, password);
      await createUserProfileDocument(user, { displayName });
      this.setState({ displayName: '', email: '', password: '', confirmPassword: '' });
    } catch (error) {
      console.log(error);
    }
```

# Sign In With Email and Password

- just as in signup there is auth.createUserWithEmailAndPassword, there is also
  auth.signInWithEmailAndPassword which allows users to sign in with
  the email and password they registered. 

Code #1:
// note just as in signup, handleSubmit will also be async; 
```
handleSubmit = async event => {
    event.preventDefault();

    const { email, password } = this.state;

    try {
      await auth.signInWithEmailAndPassword(email, password);
      this.setState({ email: '', password: '' });
    } catch (error) {
      console.log(error);
    }
  }
```