// notes for self-use 01.08.22
**: Referring to Components
++: Referring to some key terms

/* 
  Lectures Covered:
  Section Overview
  Redux Introduction
  Redux Concepts
  Redux Actions and Reducers
*/

Overview:
- now implementing Redux into the App.

- React is a UI library, focusing on the UI. As our App
  grow more complicated, the state is going to grow as well. 

- we will implement in the Redux library into our App which
  allows +React State+ to be more scalable. 

# Redux Introduction
- Redux === this.state

- app can get very complicated as state grew large, 
  so Redux solves the problem by removing all the state
  from the components, and instead have +props+ so all the
  components just have +props+ being passed down. 

- the state will be kept in a +store+, and a +store+ is simply
  just the state (this.state) but in one massive object. 

<hr />

# Redux Concepts
- Redux is good for managing large state, 
  useful for sharing data between components, 
  predictable state management using the 3 principles. 

- the 3 principles: 
  1. Single source of truth (one single big object that describes the entire state of the App), 
  2. State is read only (immutability, prevents unexpected behaviors), 
  3. Changes using pure functions (receives an input and always return an output that is predictable)

- Redux flow: Action -> Root Reducer -> Store -> DOM changes
  > Action: such as clicking a button or dropdown; 
  > Reducer: once action is performed, it goes through this step. Reducer is a pure function, which
    the input is the action. 
  > Store: the output created by the reducer is the store, which it gets updated. 
  > DOM changes: React notices the change and updates the DOM. 

- Redux uses an architectural pattern called the +Flux Pattern+ (one way data flow): 
  Action -> Dispatcher -> Store -> View

- Redux doesn't neccessarily replace React state. It is a common pattern
  to keep only important state in +Redux Store+ while keeping UI specific 
  state like form inputs in this.state. 

<hr />

# Redux In Our Application
- identify the problems in our current existing App:
  > App component: 
    1. anything related to when user (built, authenticated and stored in DB)
    is all kept in the App state; if we were to pass it down to components
    nested in other components, it would create a behavior called +prop drilling+.
    This is a bad behavior because the components in between doesn't need the prop. 

- Redux In Our App diagram (01.08.22) see under folder. 

<hr />

# Redux Actions and Reducers
- +action+ is an object that has a +type+ with a string value and
  +payload+ with any value. 

- after +action+ is triggered, it go into +reducer+ and check
  type of action is applicable to that +reducer+. 
  e.g. if we update user, only user +reducer+ cares about the action. 

- and then the reducer passes it as prop to the component. 
  e.g. if we update user, we update the user reducer with payload, 
  and then pass currentUser as a prop to the component. 

- it will always follow the above flow. 

- Redux is essentially doing similar things to this.setState(). 

Code #1:
/*
  - every reducer is a function;
  - the function takes a state and action, 
    > the state is the previous state that it was in;
      the state before this new action; 
  - returns an new object, and the object is the new state of
    our user reducer (example used in this case); 
*/
```
const userReducer = (currentState, action) => {
  switch (action.type) {
    case 'SET_CURRENT_USER':
      return {
        ...currentState,
        currentUser: action.payload
      };
    default:
      return currentState;
  }
}; // => { currentUser: { ... } }
```

- we always return a new object because we want the component
  to be re-rendered.

- if none of the action types matched, then we just return the current state, 
  because we do not want to re-render anything in this case. The action
  did not affect our reducer. 

- the reducer only updates if the type is relavent to it. 

- again to summarize, +reducers+ are a function that takes in the
  currentState and action, and based on the action, it determines
  whether or not it needs to re-render. 