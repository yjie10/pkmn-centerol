// notes for self-use 01.23.22
**: Referring to Components
++: Referring to some key terms
__: Highlight

/* 
  Lectures Covered:
  Directory State Into Redux
  Collection State Into Redux
  Collection Overview Component

  Nested Routing in Shop Page
  Collection Routing and Selector
*/

01.22.22 Summary: 
- Notes on +local storage+ and +session storage+
  > local storage: remains in storage after item is cleared manually
  > session storage: loses everything after the tab is closed
- Added +Redux Persist+ into application to store the cart items using +local storage+

···

01.23.22 Overview:


···

# Directory State Into Redux
Overview: 
- move the 'sections' stored in *Directory* into Redux Store
- move 'shop data'

---

- perhaps the data could be used in mutiple components
  e.g.: if current display does not really compat with mobile, 
  we can create a component specifically for mobile view and pull in the same data

- same thing with the shop data, same reason as above

- category page is not yet built, we will want to use the same shop data when the pages are built

- start with directory first, create a directory folder under redux

- question is: is it worth to export out one time, immutable data; there's a benefit to this:
  that is, _testing_, which is a very important part of web dev

```
const directoryReducer = (state = INITIAL_STATE, action) => {
  switch (action.type) {
    default:
      return state;
  }
}

export default directoryReducer;
``` // need to remember to bring it into root reducer

- now bring the state in from redux, so *Directory* no need to be a
  class component because it doesn't need local state anymore

- create selector for directory-category


<hr />

# Collection State Into Redux

- doing the same thing for the shop data

- notes: usually big data like the shop data is stored on the backend -- will be doing the same thing
  in a more advanced firebase lesson; so right now, we will be storing it in redux state

- create shop reducer, and bringing the shop data;
  update root-reducer;
  update component from class to functional


<hr />


# Collection Overview Component
- modify something in redux to be more performant

- building the category pages next

- nested routing in the ShopPage: /shop/plush; 

- first, will move collections.map inside ShopPage into its own component, called *CollectionsOverview*


<hr />


# Nested Routing in Shop Page
- import { Route } into *ShopPage*
- instead of rendering just a component, we will render *CollectionsOverview* in a Route
- create *Category* Page component, and bring it into **ShopPage**
- minor naming change, instead of **CategoryPage**, name it **CollectionPage** so it is consistent: 
  ShopPage > CollectionPage > CollectionItem

# Collection Routing and selector
- using the correct id, we want to get the correct item

```
// we are using this object because the URL parameter is a string, and the 
// id we want to match is a number
const COLLECTION_ID_MAP = {
  'plush': 1,
  'figures&pins': 2,
  'game': 3,
  'apparel': 4,
  'accessories': 5,
  'stationery': 6
}
```

```
// currying: a function that returns another function
export const selectShopCollection = collectionUrlParam =>
  createSelector(
    [selectShopCollections],
    collections => collections.find(collection => collection.id === COLLECTION_ID_MAP[collectionUrlParam])
  );
```

```
// ownProps
const mapStateToProps = (state, ownProps) => ({
  collection: selectShopCollection(ownProps.match.params.collectionId)(state)
})
```